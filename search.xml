<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[webpack4.29.0基本用法]]></title>
    <url>%2F2019%2F01%2F25%2Fwebpack4-29-0%2F</url>
    <content type="text"><![CDATA[不积跬步无以至千里，不积小流无以成江海 从2009到2019社会在不断进步 技术也在不断进步 我们当然也不能落后 准备工作 全局安装webpack和webpack-cli sudo npm install webpack -gsudo npm install webpack-cli -g 文件夹下局部安装 npm init -ysudo npm install webpack –save-devsudo npm install webpack-cli –save-dev 实现对一个js文件打包1234567891011//webpack.config.jsconst path = require(&apos;path&apos;)module.exports = &#123; mode:&apos;development&apos;, entry:&apos;./app.js&apos;, output:&#123; filename:&apos;[name].bundle.js&apos;, path:path.join(__dirname,&apos;./dist&apos;), &#125;&#125;这样就能在dist目录下出现一个app.bundle.js文件啦！ 实现多个js文件打包12345678910111213141516171819//webpack.config.jsconst path = require(&apos;path&apos;)const CleanWebpackPlugin = require(&apos;clean-webpack-plugin&apos;)module.exports = &#123; mode: &apos;development&apos;, entry: &#123; index: &apos;./src/index.js&apos;, test: &apos;./src/test.js&apos;, test1: &apos;./src/test1.js&apos;, &#125;, output: &#123; path: path.join(__dirname,&apos;./dist/js&apos;), filename:&apos;[name]-[hash].js&apos;, pubicPath: &apos;http://cdn.con&apos; //请求时会自己加协议（location.protocol=&apos;http&apos;）和端口号(host=&apos;cdn.con&apos;) &#125;， plugins: [ new CleanWebpackPlugin ([&apos;./dist/js&apos;]) //清除之前打包的文件 ]&#125; 使用模版实现每个js对应自己的html123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657//webpack.config.jsconst path = require(&apos;path&apos;)const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;) //模版loaderconst CleanWebpackPlugin = require(&apos;clean-webpack-plugin&apos;)module.exports = &#123; entry:&#123; index:&apos;./src/index.js&apos;, test:&apos;./src/test.js&apos;, test1:&apos;./src/test1.js&apos;, &#125;, output:&#123; path:path.join(__dirname,&apos;./dist/js&apos;), filename:&apos;[name]-[hash].js&apos;, publicPath:&quot;http://cdn.com&quot; &#125;, plugins:[ new HtmlWebpackPlugin(&#123; title: &apos;this a index.html&apos;, //每个html 的title template:&apos;hello.html&apos;, filename:&apos;index.html&apos;, excludeChunks:[&apos;test&apos;,&apos;test1&apos;] //排除名为test.js,test1.js打包的js文件 &#125;), new HtmlWebpackPlugin(&#123; title:&apos;this a test.js&apos;, template:&apos;hello.html&apos;, filename:&apos;test.html&apos;, excludeChunks:[&apos;index&apos;,&apos;test1&apos;] &#125;), new HtmlWebpackPlugin(&#123; title:&apos;this a test1.js&apos;, template:&apos;hello.html&apos;, filename:&apos;test1.html&apos;, excludeChunks:[&apos;test&apos;,&apos;index&apos;] &#125;), new CleanWebpackPlugin([&apos;./dist/js&apos;]) ]&#125;//hello.html 模版内容&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;&lt;title&gt;&lt;%= htmlWebpackPlugin.options.title%&gt;&lt;/title&gt;&lt;script type=&quot;text/javascript&quot;&gt; &lt;%= compilation.assets[htmlWebpackPlugin.files.chunks.test1.entry.substr (htmlWebpackPlugin.files.publicPath.length)].source() %&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;% for(let k in htmlWebpackPlugin.files.chunks) &#123;%&gt; &lt;% if(k != &apos;index&apos;) &#123;%&gt; &lt;script src=&quot;&lt;%=htmlWebpackPlugin.files.chunks[k].entry %&gt;&quot;&gt;&lt;/script&gt; &lt;% &#125;%&gt; &lt;% &#125; %&gt;&lt;/body&gt; 使用file-loader|css-loader|style-loader|postcss-loader1234567891011121314151617181920212223242526272829303132333435//webpack.config.jsmodule.exports = &#123;mode: &apos;development&apos;,entry: &apos;./app.js&apos;,output: &#123; filename: &apos;[name].bundle.js&apos;, path: path.join(__dirname, &apos;./dist/js1&apos;),&#125;,plugins: [ new CleanWebpackPlugin([&apos;./dist/js1&apos;]), require(&apos;autoprefixer&apos;)],module: &#123; rules: [ &#123; test: /\.(le|c)ss$/, test: /\.(png|jpg|gif)$/, use: [ &#123; loader: &quot;style-loader&quot; &#125;, &#123; loader: &quot;css-loader&quot; &#125;, &#123; loader: &apos;file-loader&apos;&#125;, &#123; loader: &quot;postcss-loader&quot;, options: &#123; plugins: [ require(&quot;autoprefixer&quot;) /*在这里添加*/, ], &#125; &#125; ] &#125; ] &#125;,&#125;]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>webpack4+</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用github和hexo搭建个人博客]]></title>
    <url>%2F2019%2F01%2F24%2Fposts%2F</url>
    <content type="text"><![CDATA[所谓博客，都是孤芳自赏 现在越来越多的人喜欢利用Github搭建静态网站，原因不外乎简单省钱。本人也利用hexo+github搭建了本博客，用于分享一些心得。在此过程中，折腾博客的各种配置以及功能占具了我一部分时间，在此详细记录下我是如何利用hexo+github搭建静态博客以及一些配置相关问题，以免过后遗忘，且当备份之用。 准备工作 下载node.js并安装（官网下载安装），默认会安装npm。 下载安装git（官网下载安装） 下载安装hexo。方法：打开cmd 运行npm install -g hexo 本地搭建hexo静态博客 新建一个文件夹，如MyBlog 进入该文件夹内，右击运行git，输入：hexo init（生成hexo模板，可能要翻墙） 生成完模板，运行npm install（目前貌似不用运行这一步） 最后运行：hexo server （运行程序，访问本地+localhost:4000可以看到博客已经搭建成功） 部署github 在MyBlog下安装 npm install –save hexo-deployer-git 找到_config.yml文件修改一下文件 deploy:type: gitrepo: https://github.com/Zhanghuaxiao/Zhanghuaxiao.github.io.gitbranch: master 最后运行 hexo clean(清除) hexo g(生成) hexo d(部署) 点击查看效果: https://zhanghuaxiao.github.io/ 使用nexT主题 安装 git clone https://github.com/iissnan/hexo-theme-next themes/next 修改_config.yml文件中 theme:next 运行hexo clean hexo s hexo和nexT中文网 hexo中文网 https://hexo.io/zh-cn/docs/helpersnexT中文官网 http://theme-next.iissnan.com/getting-started.html nexT主题参考文章 对nexT主题设置:https://segmentfault.com/a/1190000009544924#articleHeader2seo优化:https://www.jianshu.com/p/86557c34b671]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>nexT</tag>
        <tag>搭建自己博客</tag>
      </tags>
  </entry>
</search>
